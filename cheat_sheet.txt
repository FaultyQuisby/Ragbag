.BASHRC :
    shopt -s histverify
		That's if you want to validate before re-running a previous command.

VIM COMMANDS :
    % -> moves to matching parenthesis, square bracket or curly brace
    w -> moves to the begining of the next word
    e -> moves to the last letter of the word
    W -> Move forward a WORD (any non-whitespace characters)
    b -> Move backward to the begining of a word
    i -> editing where the cursor is
    a -> editing one char ahead
    G -> go to the end of file
    gg -> go the the beginning of file
    12G -> go to line 12
    gd -> go to the local declaration
    gD -> go to the global declaration
    g* -> search for the word under the cursor 
		  (like * but g* on 'rain' will find words like 'rainbow')
    g# -> same as g* but in backward direction
    v -> select chars
    V -> select line
    C^v -> select blocks
    d -> cut
    y -> copy
	yy -> copies the current line
    p -> paste after
    P -> paste before
    ciw -> change inner word
    0 -> debut de ligne
    $ -> fin de ligne
    ^ -> Move the the first non-blank char of the line
    ( -> jump forward one sentence
    ) -> jump backward one sentence
    { -> jump forward one paragraph
    } -> jump backward one paragraph
    H -> jump to the top of the screen
    M -> jump to the middle of the screen
    L -> jump to the bottom of the screen
    h -> gauche
    l -> droite
    k -> haut
    j -> bas
    3iANYTHING -> prints 3 times ANYTHING
    f - letter -> goto next occurence of a letter
    F - letter -> goto previous occurence of a letter
    * -> goto next occurence of a word
    # -> goto previous occurence of a word
    r - letter -> replace with letter
    x -> deletes what's under the cursor
    vjjj> -> indents 3 selected lines
    yiw -> exclusively yanks the current word 
    yaw -> inclusively yanks the current word
    dd -> deletes line
    3dd -> deletes 3 lines
    u -> undo
    C^r -> redo
    C^w -> delete previous word in insert mode
    /\<word\> search for an exact word
    /word -> searches for the word
    n -> after a search command goto next occurence
    N -> after a search commant goto previous occurence
    :e 'filename' -> opens 'filename'
	c^f -> move forward a page
	c^b -> move backward a page
    c^] -> jump inside tag
    c^t -> jump outside tag
    :tags -> summary of all tags browsed

SUBSTITUTE :
    :%s/old_WORD/new_WORD/g -> replaces all instances of a word by 
							   the new specified one
    (gc, ask for confirmation)
    (gi, case insensitive)

GIT : 
    git add -A -> tracks all untracked files
    git add . -> adds all files of the current directory to track
    git add * -> adds all files of the current directory 
			     EVEN FUCKING FOLDERS AND THEIR CONTENT.
    
    git commit -m "message" -> commits with a message
    git checkout <branch> -> set active branch
    git branch <branch> -> create a new branch
    git checkout -b <branch> -> create a new branch AND set it as active
    git merge <branch> -> merges the specified branch into the active branch, 
						  making a unique branch but keeping history of the 
						  parents. Merge is suck and fusion.

    C0 -- C1 ---- C2
      	   \        \
 		   C2' ---- C3

    git rebase <branch> -> rebase the active branch onto the specified branch, 
						   making the specified branch parent of the active 
						   branch. 
						   Rebase is blow and expand.

    C0 -- C1 ---- C2
           \        \
           C2' ---- C3
    (with C2' local only)
    
    the -i option stands for "interactive" it opens an UI in which you can :
     - Reorder commits.
     - Drop commits (via pick on or off)
     - Squash commits (combine) //////////// learn that dawg ////////////
     it will append the new ordered and cleaned up at will list of commits to 
	 the rebased at, specified commit.

    HEAD is a pointer representing where you are in the repo, 
	if its on a branch pointer then the latter is said active.

    HEAD is the symbolic name for the currently ckecked out commit. 
	It's the commit you're working on top of.

    HEAD is by default, the last commit of your active branch 
	(points to your active branch pointer which points to its last commit).
	
    "HEAD -> master -> C1"
    
    git checkout <commit_hash> -> makes HEAD point to the adress of the 
	specified commit, making it more like so : 

	"HEAD -> C1".
    
    This is called detaching.
    
    You can specify the begining of the commit_hash, git is "smart" about 
	that or you can use relative refs:
    git checkout master^ -> sets HEAD to the adress of the second to last 
							commit in master branch.
    git checkout master^^ -> sets HEAD to the adress of the third to last 
							 commit in master branch.
    git checkout master~[nb] -> sets HEAD to the adress of the "nb" to last 
								commit in master branch.
    
    HEAD can also be self ref'd:

    git checkout HEAD^ -> will move HEAD up a lvl.
    git checkout HEAD~4 -> will move HEAD up 4 lvls.
    
    You can reassign a branch pointer to a commit with the -f option.
    git branch -f master HEAD~3 -> moves (by force) the master branch to three 
								   parents behind HEAD.
    
    git reset HEAD~1 -> moves the branch backwards removing last commit 
						(if head is on the branch name) great for local.
    
    git revert HEAD -> creates a new commit reverting the changes of its now 
					   parent one that's the one you want to use if you wanna 
					   push a straight reversion.
    
    git cherry-pick <commit_hash_1> <commit_hash_2> ... 
		-> adds a new commit under the active branch for each 
		   of the hash specified (multi cp pst).
    
    Make a modification in a former commit.
	
    	git rebase -i -> re-order the commits so the one to be 
						 modified is on top

   		commit --amend -> make the slight modification

   		git rebase -i -> re-order the commits back to how they were previously
  
  		git rebase -> move master to this updated part of the tree
            
	Change the message of a former commit.

		Show previous commits

			git rebase -i HEAD~3
			
		Change pick with reword in the UI
		Save and close
		Do your modifications
		Force-push the amended commits

			git push --force

    git tag v1 <commit_hash> -> creates a tag named v1 referencing 
								the specified commit
    
    git describe <ref>
        ref is anything git can resolve into a  commit (HEAD by default)
        output :
            <tag>_<numCommits>_g<hash>
            tag is the closest ancestor tag in history, numCommits is how many 
			commits away this tag is and hash is the hash of the comit being 
			described.
    
    choosing a parent when going upwards from a merge.
        git checkout master^ (first parent)
        git checkout master^2 (second parent)
        CAN BE CHAINED TOGETHER : git checkout HEAD~^2~2
        
        
GIT REMOTE :

    git clone <adress> -> to get a full copy of a distant repo on your local 
						  machine.
    
    o/master -> a remote branch

    <remote_name>/<branch_name> -> origin/master is the branch name for your 
								   remote repo.

    When you do git checkout origin/master; git commit, git puts you into 
	detached HEAD mode and makes a hidden commit.
    
    git fetch <adress> -> updates your local repo from the distant one. 
						  It updates where the remote branches points so be 
						  careful with those.
                                                    
						  AND it doesn't update existing files.
    
    git fetch origin foo -> Goes to the foo branch on the remote, grab all the 
							commits that aren't present locally, and then plop 
							them down onto the origin/foo branch locally.
    
    git fetch origin <source>:<destination>
    	<source> is a place on the remote and <destination is a local place to 
		put those commits.
        It creates the destination if it doesn't exists already.
    
    git pull -> is essentially a fetch followed by a merge branch fetched.
    
    git push -> sends your commits to the remote repo and updates the position 
				of origin/master pointer 
                (BE EXTRA CAREFUL ABOUT THE push.default file! See below.)
                             
    git push <remote> <place>
    git push origin master
            Goes to branch named "master" in local repository, 
			grab all the commits, and then go to the branch "master" on the 
			remote named "origin".
            Place whatever commits are missing on that branch.
            place is the location to synchronize between the two repositories 
			eg. master local and master remote.
            In this case, git ignores where HEAD is pointing to.
            
    git push origin <source>:<destination>
            Instead of copying at the same branch from local to remote, 
			this one actually specifies the branches.
            It can create non existent branches 
			(creating a new local pointer "origin/newbranch" , 
			and make use of relative references (see line 104)
    
    git push origin :<destination>
            deletes the <destination> branch on remote and local 
			(if it is on local).
    
    git fetch origin :<destination>
            creates the <destination> branch on local. OMEGALUL.
            
            
    git pull
        If git push is broken because your are late and the project 
		is too new for your old slow ass :

        git pull --rebase; git push == git fetch; git rebase origin/master; 
									   git push 
		(leaves the remote untouched but lose history)

        git pull; git push == git fetch; git merge origin/master; 
							  git push 
		(leaves a trace of your merge in the remote, 
		 keeps complete trace of history)
    
    	git pull origin <source>:<destination> == 
									git fetch origin <source>:<destination>; 
									git merge <destination>

    	git pull origin foo == git fetch origin foo; git merge origin/foo

    	git pull origin bar~1:bugFix  == git fetch origin bar~1:bufFix; 
									 git merge bugFix
        
    
    git checkout -b totallyNotMaster origin/master -> creates a new branch 
	named totallynotMaster and sets it to track origin/master.

    git branch -u origin/master foo -> sets the foo branch to track 
	origin/master if HEAD is not on it, otherwise go : 
		git branch -u origin/master
													
    Do this if you want to push another branch than master to the 
	remote master. 
	Or if you want to pull from remote master under another branch 
	than master.
    
    push.default values : "upstream"
        
GIT SSH :
	https://tinyurl.com/y59795nn
    https://tinyurl.com/y5qbbra7 

BASH :
    cp foo.data bar.data
    !!:gs/data/index
    cp foo.index bar.index

    remove the "g" does this for 1 occurences only

    sudo !! -> reruns last command with sudo

    !3 selects 3rd command in history

    !-2 selects second to last command in history

    !apt- selects last command starting with apt-

    ? = wildcard

    !-5:3:p -> the third parameter of the fifth from last command

    C^z + "bg" to kill a previously ran with & command.

VIM INSTALL :
    mkdir -p ~/.vim/autoload ~/.vim/bundle  
    curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim

    cd ~/.vim/bundle  
    git clone https://github.com/w0rp/ale.git
    if not installed already install exhuberant ctags or universal ctags.
    git clone https://github.com/ludovicchabant/vim-gutentags.git

.VIMRC :
    execute pathogen#infect()
    filetype plugin indent on
    set tabstop=4
    set shiftwidth=4
    set expandtab
    set number
    set ruler
    set visualbell
    set encoding=utf-8
    set textwidth=79
    set colorcolumn=80
    set laststatus=2
    set statusline+=%F
    set statusline+=%{gutentags#statusline()}
    let g:gutentags_project_root = ['Makefile']
    let g:gutentags_cache_dir = '~/.tags_cache'
    syntax on
    highlight ALEError ctermfg=130 cterm=underline
    highlight ALEWarning ctermfg=130 cterm=underline
    highlight ALEErrorSign ctermfg=130
    highlight ALEWarningSign ctermfg=130

GDB COMMAND : 
    gdb --batch --ex run --ex bt --ex q --args [program] [args]
    make an alias or use valgrind
    or install lldb
    ( sudo pacman -Sy lldb )

TO LEARN : 
    bubble sort
    heap sort
    quick sort
    merge sort
    insertion sort 

    bubble sort and heap sort are bad
    merge sort and quick sort are cool

    The heap memory is organised like a tree ?

BACKUP COMMAND :
    sudo rsync -aAXv --delete --exclude=/dev/* --exclude=/proc/* 
	--exclude=/sys/* --exclude=/tmp/* --exclude=/run/* --exclude=/mnt/* 
	--exclude=/media/* --exclude="swapfile" --exclude="lost+found" 
	--exclude=".cache" --exclude="Downloads" --exclude=".VirtualBoxVMs" 
	--exclude=".ecryptfs" /source /destination

    You can also add the option --dry-run to simulate the backup process.

RESTORE COMMAND :
    sudo rsync -aAXv --delete --exclude="lost+found" /backup /system

TO FIX :
    Double tab in vim for no reason

CODING TIPS : 
    You don't have to do memcpy on structures anymore you can do 
	the following :

    	struct Thing thing = {.id = id, .set = 0};
    	conn->db->rows[id] = thing;

    Difference between calloc and malloc is that malloc doen't initialize 
	the block of mem with zeros it leaves garbage. Also calloc takes two 
	arguments, the number of blocks and their size. calloc takes the number 
	of blocks and the size of each of these. and malloc only takes the size 
	of the block it selects.


    The prefix "out_" is a good practice to tell : This pointer is gonna 
	be used to modify the content given to it.

    Remember to always size your strings (with defined lengths) to prevent 
	any bug.

    Segfault is when you try to  access memory that doesn't belong to you.

    STACK
    	The stack is LIFO used for local variables.

    	All information required to resume pending functions is stored on 
		the stack.

    	Once a function/method has completed its cycle, the space on 
		the stack used by all variables is freed.
		
    	The chain of suspended functions calls is the stack, 
		because elements in the stack (function calls) depend on each other.
    	
		The stack is important to consider in exception handling 
		and thread executions

    HEAP
		The heap is simply the memory used by programs to store global 
		variables.
	
    	Elements of the heap (variables) have no dependencies with each other 
		and can be accessed randomly at any time.
	
    	All global variables are stored in heap memory.

    	All variables dynamically created by the program with 
		"new()" or "malloc()" or similar commands are also stored on the heap.

    	When a function exits the heap is freed and then the stack is freed.

   	C equivalent of "new" is : "malloc(sizeof(struct obj));"

    To access an obj (struct) 's  properties use the -> operator if 
	you're dealing with a pointer and . if you're dealing 
	with "basic" types.

    Pass objects via pointer (as opposed to by value).

    If you think of an error that might happen at one point in your code 
	while you are writing it, check it with "assert()" it'll either print 
	into the error stream and close the program or do nothing.

    In C methods are not in the class (struct) so constructor and 
	destructor must be done as if they were (and they are) external 
	functions.

    Whenever malloc() or calloc() is called free() must be too.

	In C there are two basic types of libraries :
		STATIC
			A set of .o object files and their functions, and you can
			treat it like one big .o file when building your programs.

		DYNAMIC
			Ending in .so, .dll or about one million other ending on OSX,
			depending on the version and who happened to be working that
			day (.dylib, .bundle .framework ...). These files are built
			and then placed in a common location. When you run your program,
			the OS dynamically loads these files and links them to your 
			program on the fly.
	
	Static libraries -> small to medium-sized projects because they are
						easier to deal with and work on most OS.

	Dynamic libraries -> good for larger systems, when space is tight,
						 or if you have a lage number of programs
						 that use common functionnality.
	
	dl usually stands for "dynamic loading" in that case :
		-ldl, dlopen(), dlsym(), dlclose()...
	
	Example of compilation commands for a program loading a dynamic lib
	(linking) :
		cc -c lib.c -o lib.o (may need -fPIC on some platforms)
		cc -shared -o lib.so lib.o
		cc -Wall -g -DNDEBUG prog.c -ldl -o prog
	
	WARNING! You might run "cc -Wall -g -DNDEBUG -ldl prog.c -o prog"
	thinking everything will work but nope. On some platforms the order
	might change eg. 
	Debian and Ubuntu need "cc -Wall -g -DNDEBUG prog.c -ldl -o prog"

	
	Function pointers :
		Pointer to function -> (*function_name)

		If I do 
			typedef int (*lib_function) (const char *data)

		In "lib_function f = int (*lib_function)(const char *data)"
		-> f is a function that returns an int and takes a const
		   string data as a parameter.
		   

DATA STRUCTURES :
    Doubly linked lists :
        A linked list works by nodes having pointers to their next or previous
        element. A doubly linked list contains pointers to both, while a singly
        linked list only points at the next element.

        Advantages :
            You can do some operations very quickly. Anything that involves
            inserting or deleting an element will be very fast. They're easy
            to implement.

        Disadvantages :
            Traversing it involves processing every single pointer along the
            way. This means that searching, most sorting, and iterating over
            the elements will be slow. You also can't really jump to random
            parts of the list. That means if you want the tenth element, you
            have to go through the first nine elements.
    
    Dynamic Arrays :
        This is an array that grows on its own, and have most of the same 
        features as a linked list.        
        It's an array of void ** pointers that's pre-allocated in one shot and
        that point at the data.

        Advantages :
            It will usually take up less space, run faster, and has other 
            beneficial properties, compared to the liked list.

        Disadvantages : 
            Very slow removal from the front, with a solution to just do it
            at the end.
